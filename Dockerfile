# ==========================
# üß± Giai ƒëo·∫°n 0: Node.js Builder - Build frontend
# ==========================
FROM node:18-alpine AS nodejs_builder

WORKDIR /app

# ‚úÖ Sao ch√©p package.json, v√† ch·ªâ sao ch√©p package-lock.json n·∫øu c√≥
# D√≤ng d∆∞·ªõi d√πng ƒë·ªÉ tr√°nh l·ªói n·∫øu file package-lock.json kh√¥ng t·ªìn t·∫°i
COPY package.json ./
# COPY package-lock.json ./  # ‚ùå b·ªè qua n·∫øu b·∫°n kh√¥ng c√≥ file n√†y

# C√†i ƒë·∫∑t dependencies
RUN npm install

# Sao ch√©p to√†n b·ªô m√£ ngu·ªìn
COPY . .

# Build frontend (ƒë·∫£m b·∫£o b·∫°n c√≥ script "build" trong package.json)
RUN npm run build


# ==========================
# üêò Giai ƒëo·∫°n 1: PHP Builder - C√†i ƒë·∫∑t Laravel v√† PHP
# ==========================
FROM php:8.2-fpm-alpine AS php_builder

# C√†i ƒë·∫∑t c√°c th∆∞ vi·ªán h·ªá th·ªëng c·∫ßn thi·∫øt
RUN apk add --no-cache \
    git \
    nginx \
    postgresql-dev \
    libpq \
    sqlite-dev \
    libzip-dev \
    imagemagick-dev \
    libwebp-dev \
    supervisor \
    bash

# C√†i ƒë·∫∑t PHP extensions ph·ªï bi·∫øn
RUN docker-php-ext-install -j$(nproc) pdo_mysql pdo_pgsql zip

WORKDIR /app

# ‚úÖ Sao ch√©p Composer file (composer.json + composer.lock n·∫øu c√≥)
COPY composer.json ./
# COPY composer.lock ./  # ‚ùå B·ªè n·∫øu b·∫°n ch∆∞a c√≥ composer.lock

# C√†i ƒë·∫∑t Composer
RUN curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer --version=2.7.2

# C√†i ƒë·∫∑t dependencies c·ªßa PHP (production mode)
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Sao ch√©p to√†n b·ªô m√£ ngu·ªìn Laravel
COPY . .

# ‚úÖ Sao ch√©p c√°c file ƒë√£ build t·ª´ giai ƒëo·∫°n Node.js
COPY --from=nodejs_builder /app/public/build /app/public/build

# C·∫•p quy·ªÅn cho storage v√† bootstrap/cache
RUN chown -R www-data:www-data storage bootstrap/cache
RUN chmod -R 775 storage bootstrap/cache

# T·∫°o .env n·∫øu ch∆∞a c√≥
RUN cp .env.example .env || true

# Cache c·∫•u h√¨nh Laravel
RUN php artisan key:generate --force \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache \
    && php artisan event:cache


# ==========================
# üöÄ Giai ƒëo·∫°n 2: Production Image
# ==========================
FROM php:8.2-fpm-alpine

# C√†i ƒë·∫∑t Nginx v√† Supervisor
RUN apk add --no-cache nginx supervisor

WORKDIR /var/www/html

# Sao ch√©p ·ª©ng d·ª•ng ƒë√£ build
COPY --from=php_builder /app /var/www/html

# Sao ch√©p c·∫•u h√¨nh Nginx v√† Supervisor
COPY nginx.conf /etc/nginx/conf.d/default.conf
COPY supervisord.conf /etc/supervisord.conf

# C·∫•p quy·ªÅn cho c√°c th∆∞ m·ª•c c·∫ßn thi·∫øt
RUN chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache /var/www/html/public \
    && chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache /var/www/html/public

# Expose port 8000
EXPOSE 8000

# Ch·∫°y Supervisor ƒë·ªÉ qu·∫£n l√Ω Nginx & PHP-FPM
CMD ["/usr/bin/supervisord", "-c", "/etc/supervisord.conf"]
